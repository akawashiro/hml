
==================== FINAL INTERFACE ====================
2017-06-09 09:23:38.600776 UTC

interface main@main:Main 8002
  interface hash: 6427d521c47a947817bd60e2f0655d1b
  ABI hash: 6faf46bdb2abc68c31acb0c73d63bb08
  export-list hash: db525fea732a25794fdca22fb3287125
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f236a816fb86e59b01ca215aef968e3b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.printResult
  Main.printResult'
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hml-0.1.0.0@hml-0.1.0.0-KdOix18Qri95U7BZnPlCun integer-gmp-1.0.0.1
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hml-0.1.0.0@hml-0.1.0.0-KdOix18Qri95U7BZnPlCun:Eval 442cf60ee24bfb52ca67301d5012b5c5
import  -/  hml-0.1.0.0@hml-0.1.0.0-KdOix18Qri95U7BZnPlCun:Parse 404f4134e80b3268985d009262e261ad
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
129a1a814fa667791781f32a098e848d
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
ad99ccf3878848a3a7ca9b90bfd52dc8
  printResult ::
    (GHC.Show.Show a2, GHC.Show.Show a, GHC.Show.Show a1) =>
    Data.Either.Either a2 [Data.Either.Either a1 a] -> [GHC.Types.Char]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U),A)><L,U(A,C(U),A)><L,U(A,C(U),A)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ a1
                   @ a2
                   ($dShow :: GHC.Show.Show a2)
                   ($dShow1 :: GHC.Show.Show a)
                   ($dShow2 :: GHC.Show.Show a1)
                   (ds :: Data.Either.Either a2 [Data.Either.Either a1 a]) ->
                 case ds of wild {
                   Data.Either.Left s -> GHC.Show.show @ a2 $dShow s
                   Data.Either.Right xs
                   -> Main.printResult' @ a @ a1 $dShow2 $dShow1 xs }) -}
6bbb7a002fa2d63160450fa0548af4cb
  printResult' ::
    (GHC.Show.Show a1, GHC.Show.Show a) =>
    [Data.Either.Either a1 a] -> [GHC.Types.Char]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(U),A)><L,U(A,C(U),A)><S,1*U>,
     Unfolding: (\ @ a
                   @ a1
                   ($dShow :: GHC.Show.Show a1)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [Data.Either.Either a1 a]) ->
                 letrec {
                   printResult'1 :: [Data.Either.Either a1 a] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Either.Either a1 a]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Char
                       : ds1 xs
                       -> case ds1 of wild1 {
                            Data.Either.Left x
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ a1 $dShow x)
                                 (GHC.CString.unpackAppendCString# "\n"# (printResult'1 xs))
                            Data.Either.Right x
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 (GHC.Show.show @ a $dShow1 x)
                                 (GHC.CString.unpackAppendCString# "\n"# (printResult'1 xs)) } }
                 } in
                 printResult'1 eta) -}
0b974e8e7284341e54afaa9422b4068b
  printResult_printResult' ::
    [Data.Either.Either GHC.Base.String Eval.ExVal] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

